plugins {
	id 'org.springframework.boot' version '3.1.0'
	id 'io.spring.dependency-management' version '1.1.0'
	id 'java'
	id "com.palantir.docker" version "0.35.0"
	id "com.palantir.docker-run" version "0.35.0"
	//información de los plugin docker https://github.com/palantir/gradle-docker
}

group = 'us.mitfs.samples'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '17'

repositories {
	mavenCentral()
	maven {
		name = "GitHubPackages"
		url = uri("https://maven.pkg.github.com/MIT-FS/Audit4Improve-API")
		credentials {
		//las propiedades gpr.user y gpr.key estÃ¡n configuradas en gradle.properties en el raiz del proyecto, y se aÃ±ade a .gitignore para que no se suban
		//O bien configuro las variables de entorno GITHUB_LOGIN y GITHUB_PACKAGES
			username = project.findProperty("gpr.user") ?: System.getenv("GITHUB_LOGIN")
			password = project.findProperty("gpr.key") ?: System.getenv("GITHUB_PACKAGES")
		}
	}
	maven {
		url "https://mvnrepository.com/artifact/com.spotify/github-client"
	}
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'us.mitfs.samples:a4i:0.1.2'	
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
}

tasks.named('test') {
	useJUnitPlatform()
}
docker {
    copySpec.from("build/libs").into("build/libs")
    name "audit-server:$version"
    buildArgs([VERSION:version])
}
dockerRun {
    name 'auditServerContainer'
    image 'audit-server:0.0.1-SNAPSHOT'
    ports '8080:8080'
    daemonize true
    env 'GITHUB_LOGIN': project.findProperty("gpr.user") ?: System.getenv("GITHUB_LOGIN"), 'GITHUB_OAUTH': project.findProperty("gpr.key") ?: System.getenv("GITHUB_OAUTH")
}
tasks.register('localenv-up') {
	doLast {
		exec {
			executable "./scripts/localenv/up.sh"
		}
	}
}

tasks.register('localenv-down') {
	doLast {
		exec {
			executable "./scripts/localenv/down.sh"
		}
	}
}

tasks.register('localenv-build') {
	dependsOn 'localenv-up'
	doLast {
		exec {
			executable "./scripts/localenv/build.sh"
		}
	}
}

tasks.register('localenv-deploy') {
	dependsOn 'localenv-build'
	doLast {
		exec {
			executable "./scripts/localenv/deploy.sh"
		}
	}
}

tasks.register('localenv-win-up') {
   
    doLast {
		exec {
			commandLine  "powershell", "./scripts/localenv/win-up.ps1"
		}
	}
}

tasks.register('localenv-win-deploy') {
   	doLast {
		exec {
			commandLine  "powershell", "./scripts/localenv/win-deploy.ps1"
		}
	}
}
tasks.register('localenv-win-down') {
	doLast {
		exec {
			commandLine  "powershell", "./scripts/localenv/win-down.ps1"
		}
	}
}
